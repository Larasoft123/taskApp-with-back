---
import { Status, TypeTask } from "@prisma/client";
import TaskBadge from "@/components/task-badge.astro";
import { DeleteButton } from "@/components/delete-button.tsx";
import Button from "@/components/Button.astro";
import { CreateTaskForm } from "@/components/forms/create-task-form.tsx";
import { X, Tag, Calendar } from "lucide-preact";

// El tipo `Tags` se importa de Prisma Client, que deber√≠a coincidir con esta estructura.
interface Tag {
  id: number;
  name: string;
}

interface Props {
  tags?: Tag[];
  createdAt: Date;
  updatedAt: Date;
  userId: string;
  id: number;
  type: TypeTask;
  title: string;
  status: Status;
  description: string | null;
}

const { title, id, tags, description, status, type, createdAt } = Astro.props;

const STATUS_GRADIENT_CLASSES = {
  PENDING: "bg-blue-500", // yellow-400 to orange-400
  IN_PROGRESS: "bg-amber-500", // blue-500 to violet-500
  DONE: "bg-green-500", // green-500 to teal-500
};

let formattedDate = "Fecha no disponible";
if (createdAt && !isNaN(new Date(createdAt).getTime())) {
  formattedDate = new Intl.DateTimeFormat("es-ES", {
    year: "numeric",
    month: "long",
    day: "numeric",
  }).format(new Date(createdAt));
}
---








<article
  class="group max-w-md flex group bg-white/95 flex-col dark:bg-gray-800/95 backdrop-blur-sm rounded-[10px] shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden h-full"
>

  
  <div
    class={`flex relative flex-col  backdrop-blur-sm hover:shadow-xl transition-all overflow-hidden h-full  rounded-xl shadow-xl duration-300 border-animated`}
  >

  
    <div class="p-6 flex flex-col h-full">
      <div class="flex-grow">
        <div class="flex justify-between items-start mb-2">
          <h3 class="font-bold text-lg text-gray-900 dark:text-gray-100 pr-4">
            {title}
          </h3>
          <div class="flex flex-col gap-y-2 items-end flex-shrink-0">
            <TaskBadge status={status} />
            <TaskBadge type={type} />
          </div>
        </div>
        {
          description && (
            <p class="text-gray-600 text-sm dark:text-gray-400 mt-2 mb-4">
              {description}
            </p>
          )
        }

        {
          tags && tags.length > 0 && (
            <div class={` flex mt-4 mb-3 flex-wrap gap-2 items-center`}>
              {tags.map((tag) => (
                <span class="inline-flex justify-center items-center gap-x-1.5 py-1 px-2.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-800/30 dark:text-blue-400">
                  <Tag class="w-3 h-3" />
                  {tag.name}
                </span>
              ))}
            </div>
          )
        }
      </div>

      <div class="border-t border-gray-200 dark:border-gray-700 mt-auto pt-4">
        <div class="flex justify-between items-center">
          <span
            class="flex items-center gap-1.5 text-xs text-gray-500 dark:text-gray-400"
          >
            <Calendar class="w-3.5 h-3.5" />
            {formattedDate}
          </span>
          <div class="flex gap-2">
            <Button
              isLink={true}
              href={`/task/${id}`}
              text={"Editar"}
             
            />
            <DeleteButton client:load id={id} />
          </div>
        </div>
      </div>
    </div>
  </div>
</article>



<style></style>


<!-- "flex group flex-col bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm hover:shadow-xl transition-all overflow-hidden h-full relative rounded-xl shadow-xl duration-300 border-animated" -->