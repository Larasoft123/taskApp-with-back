---
import { Status, TypeTask, type Tasks } from "@prisma/client";

import TaskCard from "@/components/task-card.astro";
import { getSession } from "auth-astro/server";
import type { Session, User } from "@auth/core/types";

interface Props {
  type?: TypeTask | "ALL";
  status?: Status | "ALL";
}

const {
  user: { id },
} = (await getSession(Astro.request)) as Session;

const { type = "ALL", status = "ALL" } = Astro.props;

// Construye la URL absoluta usando Astro.url.origin
const url = new URL("/api/tasks", Astro.url.origin);

// Agrega los parámetros de búsqueda (query parameters)
if (type !== "ALL") {
  url.searchParams.append("type", type);
}

if (status !== "ALL") {
  url.searchParams.append("status", status);
}

url.searchParams.append("userId", id);


const response = await fetch(url, {
  method: "GET",
  headers: {
    "Content-Type": "application/json",
  },
});

const tasks: Tasks[] = await response.json();
// await new Promise((resolve) => setTimeout(resolve, 10000)); // Simula un retraso para la demostración
---

<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
  {
    tasks.map((task) => {
      return <TaskCard {...task} />;
    })
  }
</div>
