---
import { Calendar, Clock,  FileText } from "lucide-preact";
import { NoteBtn } from "@/components/note-btn";
import { DeleteButton } from "@/components/delete-button.tsx";
interface Props {
  note: any;
}

function formatDate(dateString: string) {
  return new Date(dateString).toLocaleDateString("es-ES", { year: 'numeric', month: 'short', day: 'numeric' });
}

const { note } = Astro.props;

---

<div
  class={`group relative overflow-hidden rounded-xl transition-all duration-300 hover:scale-[1.01] hover:-translate-y-1 dark:bg-gray-800/40 dark:hover:bg-gray-800/60 bg-white/70 hover:bg-white/90 backdrop-blur-md hover:shadow-xl border border-white/10`}
>
  {/* Gradient overlay */}
  <div
    class="absolute inset-0 bg-gradient-to-br dark:from-blue-500/3 dark:via-purple-500/3 dark:to-pink-500/3 dark:group-hover:from-blue-500/8 dark:group-hover:via-purple-500/8 dark:group-hover:to-pink-500/8 transition-all duration-300"
  >
  </div>

  {/* Card Content */}
  <div class="relative p-6">
    {/* Header with icon and ID */}
    <div class="flex items-center justify-between mb-4">
      <div
        class={`p-2 rounded-lg dark:bg-blue-500/10 bg-blue-50 transition-all duration-300 group-hover:scale-105`}
      >
        <FileText class={`w-5 h-5 dark:text-blue-400 text-blue-600`} />
      </div>
      <span
        class={`text-xs font-medium px-2 py-1 rounded-full dark:bg-gray-700/5 dark:text-gray-300 bg-gray-100 text-gray-600`}
      >
        #{note.id.toString().padStart(3, "0")}
      </span>
    </div>

    {/* Title */}
    <h3
      class={`text-lg font-semibold mb-3 dark:text-white  text-gray-900 line-clamp-2 leading-tight`}
    >
      {note.title}
    </h3>

    {/* Description */}
    <p
      class={`text-sm leading-relaxed mb-4 dark:text-gray-300 text-gray-600 line-clamp-3`}
    >
      {note.description}
    </p>

    {/* Tags */}
    <div class="flex flex-wrap gap-2 mb-6">
      {
        note.tags.map((tag: any) => (
          <span class="inline-flex justify-center items-center gap-x-1.5 py-1 px-2.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-800/30 dark:text-blue-400">
            {tag.name}
          </span>
        ))
      }
    </div>

    {/* Solutions Button */}
    <NoteBtn client:load note={note} />
   
    {/* Footer with dates */}
    <div
      class="flex items-center justify-between text-xs mt-4 pt-4 border-t border-white/5"
    >
      <div class="flex items-center space-x-1">
        <Calendar class={`w-3 h-3 dark:text-gray-400  text-gray-500`} />
        <span class={"dark:text-gray-400 text-gray-500"}>
          {formatDate(note.createdAt)} 
        </span>
      </div>



       <div class="flex items-center space-x-1">
      <DeleteButton client:load id={note.id}  endpoint="note"/>
      </div>






      {
        note.updatedAt !== note.createdAt && (
          <div class="flex items-center space-x-1">
            <Clock class={`w-3 h-3 dark:text-gray-400  text-gray-500`} />
            <span class={"dark:text-gray-400 text-gray-500"}>
              {/* {formatDate(note.updatedAt)} */}
            </span>
          </div>
        )
      }
    </div>
  </div>
</div>
